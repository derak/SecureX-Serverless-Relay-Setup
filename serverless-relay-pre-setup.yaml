AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template: serverless iam user, policy and role'

Resources:
  ServerlessUser:
    Type: AWS::IAM::User
    Properties:
      UserName: serverless
      Policies:
        - PolicyName: ZappaLambdaDeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - iam:AttachRolePolicy
              - iam:GetRole
              - iam:CreateRole
              - iam:PassRole
              - iam:PutRolePolicy
              Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/*ZappaLambdaExecutionRole"
            - Effect: Allow
              Action:
              - apigateway:DELETE
              - apigateway:GET
              - apigateway:PATCH
              - apigateway:POST
              - apigateway:PUT
              - events:DeleteRule
              - events:DescribeRule
              - events:ListRules
              - events:ListRuleNamesByTarget
              - events:ListTargetsByRule
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets
              - lambda:AddPermission
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:DeleteFunctionConcurrency
              - lambda:GetAlias
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:GetPolicy
              - lambda:InvokeFunction
              - lambda:ListVersionsByFunction
              - lambda:RemovePermission
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStackResource
              - cloudformation:DescribeStacks
              - cloudformation:ListStackResources
              - cloudformation:UpdateStack
              - logs:DeleteLogGroup
              - logs:DescribeLogStreams
              - logs:FilterLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:CreateBucket
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              Resource: arn:aws:s3:::zappa-*
            - Effect: Allow
              Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              Resource: arn:aws:s3:::zappa-*/*


  TrServerlessRelayZappaLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: tr-serverless-relay-ZappaLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ZappaLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
              - lambda:InvokeFunction
              Resource: "*"

# Outputs:
#   AccessKeyID:
#     Description: 'The Access Key ID for Serverless User'
#     Value:
#       Ref: 'ServerlessUserKey'

#   AccessKeySecret:
#     Description: 'The Access Key Secret for Serverless User'
#     Value: !GetAtt ServerlessUserKey.SecretAccessKey
